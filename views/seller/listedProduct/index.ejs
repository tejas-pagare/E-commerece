<body>
    <div class="min-h-screen" style="background-color:#f8fafc;">
        <div class="max-w-7xl mx-auto p-6">
            <div class="card">
                <div class="p-6 border-b" style="border-color:#e5e7eb;">
                    <div class="flex items-center justify-between gap-3">
                        <h1 class="text-2xl font-semibold" style="color:#111827;">Products</h1>
                        <div class="flex items-center gap-3">
                            <input id="searchInput" type="text" placeholder="Search products..." class="input w-full" style="max-width: 20rem;" />
                            <a href="/api/v1/seller/create">
                                <button id="addProductBtn" class="btn btn-primary px-4 py-2 text-sm">
                                    <span class="btn-label">Add Product</span>
                                </button>
                            </a>
                        </div>
                    </div>
                </div>

                <div class="p-4 overflow-x-auto">
                    <table class="table bg-white">
                        <thead>
                            <tr>
                                <th>Image</th>
                                <th>Product Name</th>
                                <th>Quantity</th>
                                <th>Category</th>
                                <th>Status</th>
                                <th>Price</th>
                                <th>Created At</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Product rows will be rendered by JS -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <style>
        /* Minimal light-mode utility styles to mimic shadcn/ui look without requiring Tailwind runtime */
        @keyframes spin { to { transform: rotate(360deg); } }
        .animate-spin { animation: spin 1s linear infinite; }
        .card { border:1px solid #e5e7eb; border-radius: 0.75rem; background:#ffffff; box-shadow: 0 1px 2px rgba(0,0,0,0.04); }
        .input { border:1px solid #d1d5db; border-radius:0.375rem; padding:0.5rem 0.75rem; outline:none; background:#fff; color:#111827; }
        .input:focus { border-color:#111827; box-shadow:0 0 0 2px rgba(17,24,39,0.15); }
        .btn { display:inline-flex; align-items:center; gap:0.5rem; border-radius:0.5rem; font-weight:500; }
        .btn-primary { background:#111827; color:#ffffff; }
        .btn-primary:hover { background:#0f172a; }
        .btn-secondary { background:#3b82f6; color:#ffffff; }
        .btn-secondary:hover { background:#2563eb; }
        .btn-danger { background:#ef4444; color:#ffffff; }
        .btn-danger:hover { background:#dc2626; }
        .btn:disabled { opacity:0.6; cursor:not-allowed; }
        .table { width:100%; border-collapse:collapse; }
        .table th { background:#f9fafb; color:#374151; font-weight:600; font-size:12px; text-transform:uppercase; letter-spacing:0.02em; text-align:left; }
        .table th, .table td { border:1px solid #e5e7eb; padding:12px; vertical-align:middle; }
        .table tr:hover { background:#fafafa; }
        .badge { display:inline-flex; align-items:center; border-radius:9999px; padding:2px 8px; font-size:12px; font-weight:600; border:1px solid; }
        .badge-green { background:#ecfdf5; color:#065f46; border-color:#a7f3d0; }
        .badge-red { background:#fee2e2; color:#991b1b; border-color:#fecaca; }
        .btn .spinner { width:16px; height:16px; border:2px solid currentColor; border-bottom-color:transparent; border-radius:9999px; }
    </style>

    <script>
        // Client-side search filter by title, category, or status
        (function(){
            const input = document.getElementById('searchInput');
            if (!input) return;
            const onFilter = () => {
                const q = (input.value || '').toLowerCase().trim();
                const rows = document.querySelectorAll('tr.product-row');
                rows.forEach(row => {
                    const title = row.querySelector('.product-title')?.textContent?.toLowerCase() || '';
                    const category = row.querySelector('.product-category')?.textContent?.toLowerCase() || '';
                    const status = row.querySelector('.product-status')?.textContent?.toLowerCase() || '';
                    const match = !q || title.includes(q) || category.includes(q) || status.includes(q);
                    row.style.display = match ? '' : 'none';
                });
            };
            input.addEventListener('input', onFilter);
        })();

        function setButtonLoading(btnEl, isLoading, loadingText) {
            if (!btnEl) return;
            const labelSpan = btnEl.querySelector('.btn-label');
            if (isLoading) {
                if (labelSpan) { btnEl.dataset.originalLabel = labelSpan.textContent; }
                btnEl.disabled = true;
                btnEl.setAttribute('aria-busy', 'true');
                const spinner = document.createElement('span');
                spinner.className = 'spinner animate-spin';
                const text = document.createElement('span');
                text.textContent = loadingText || 'Loading...';
                btnEl.innerHTML = '';
                btnEl.appendChild(spinner);
                btnEl.appendChild(text);
            } else {
                btnEl.disabled = false;
                btnEl.removeAttribute('aria-busy');
                const original = btnEl.dataset.originalLabel || 'Action';
                btnEl.innerHTML = '<span class="btn-label">' + original + '</span>';
            }
        }

        // Add Product button loader (shows briefly before navigation)
        (function(){
            const addBtn = document.getElementById('addProductBtn');
            if (addBtn) {
                addBtn.addEventListener('click', function(){
                    setButtonLoading(addBtn, true, 'Opening...');
                });
            }
        })();

        function deleteProduct(productId, btnEl) {
            if (!productId) return;
            if (confirm('Are you sure you want to delete this product?')) {
                setButtonLoading(btnEl, true, 'Deleting...');
                var xhttp = new XMLHttpRequest();
                xhttp.onreadystatechange = function() {
                    if (this.readyState == 4) {
                        if (this.status == 200) {
                            try {
                                var data = JSON.parse(this.responseText);
                                if (data.success === undefined || data.success === true) {
                                    location.reload();
                                } else {
                                    var msg = (data && (data.message || data.error)) || 'Failed to delete product.';
                                    alert(msg);
                                    setButtonLoading(btnEl, false);
                                }
                            } catch (err) {
                                alert('Failed to delete product.');
                                setButtonLoading(btnEl, false);
                            }
                        } else {
                            alert('An error occurred while deleting the product.');
                            setButtonLoading(btnEl, false);
                        }
                    }
                };
                xhttp.open('DELETE', `/api/v1/seller/product/${productId}`, true);
                xhttp.withCredentials = true;
                xhttp.send();
            }
        }
    // Fetch and render products
    async function fetchAndRenderProducts() {
        const tbody = document.querySelector('tbody');
        if (!tbody) return;
        tbody.innerHTML = '<tr><td colspan="8" class="p-3 text-center text-sm" style="color:#6b7280;">Loading...</td></tr>';
        try {
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState === 4) {
                    if (this.status === 200) {
                        try {
                            var data = JSON.parse(this.responseText);
                            if (!data.success) throw new Error(data.message || 'Failed to fetch products');
                            var products = data.products || [];
                            if (products.length === 0) {
                                tbody.innerHTML = '<tr><td colspan="8" class="p-3 text-center text-sm" style="color:#6b7280;">No Product listed yet</td></tr>';
                                return;
                            }
                            tbody.innerHTML = '';
                            for (var i = 0; i < products.length; i++) {
                                var product = products[i];
                                var tr = document.createElement('tr');
                                tr.className = 'product-row';
                                tr.innerHTML = `
                                    <td>
                                        <img src="${product.image}" alt="Product" class="h-12 w-12 rounded-md object-cover" style="box-shadow: 0 0 0 1px #e5e7eb inset;" />
                                    </td>
                                    <td class="text-sm product-title" style="color:#111827; font-weight:500;">${product.title}</td>
                                    <td class="text-sm" style="color:#374151;">${product.quantity}</td>
                                    <td class="text-sm product-category" style="color:#374151;">${product.category}</td>
                                    <td>
                                        ${product.stock ? '<span class="badge badge-green product-status">In Stock</span>' : '<span class="badge badge-red product-status">Out Of Stock</span>'}
                                    </td>
                                    <td class="text-sm" style="color:#111827; font-weight:500;">${product.price}</td>
                                    <td class="text-sm" style="color:#374151;">${(product.createdAt || '').toString().split('T')[0]}</td>
                                    <td class="whitespace-nowrap">
                                        <div class="flex items-center gap-2">
                                            <a href="/api/v1/seller/update/${product._id || product.id}">
                                                <button class="btn btn-secondary px-3 py-1.5 text-sm">Edit</button>
                                            </a>
                                            <button onclick="deleteProduct('${product._id || product.id}', this)" class="btn btn-danger px-3 py-1.5 text-sm">
                                                <span class="btn-label">Delete</span>
                                            </button>
                                        </div>
                                    </td>
                                `;
                                tbody.appendChild(tr);
                            }
                        } catch (err) {
                            tbody.innerHTML = '<tr><td colspan="8" class="p-3 text-center text-sm" style="color:#ef4444;">Failed to load products</td></tr>';
                        }
                    } else {
                        tbody.innerHTML = '<tr><td colspan="8" class="p-3 text-center text-sm" style="color:#ef4444;">Failed to load products</td></tr>';
                    }
                }
            };
            xhttp.open('GET', '/api/v1/seller/products', true);
            xhttp.withCredentials = true;
            xhttp.send();
        } catch (err) {
            tbody.innerHTML = '<tr><td colspan="8" class="p-3 text-center text-sm" style="color:#ef4444;">Failed to load products</td></tr>';
        }
    }
    // Initial fetch
    fetchAndRenderProducts();
    // Optionally, you can re-fetch after delete or add
    // window.fetchAndRenderProducts = fetchAndRenderProducts;
    </script>
</body>