<body class="bg-[#fafafa] text-gray-900">
  <div class="max-w-7xl mx-auto p-6">
    <!-- Header -->
    <div class="mb-6 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
      <div class="flex items-center gap-3">
        <h1 class="text-2xl font-semibold tracking-tight">Customers</h1>
        <span id="count-badge" class="inline-flex items-center rounded-full border border-gray-200 bg-white px-2.5 py-0.5 text-xs font-medium text-gray-600">0</span>
      </div>
      <div class="flex w-full sm:w-auto items-center gap-2">
        <div class="relative w-full sm:w-72">
          <input
            id="search-input"
            type="text"
            placeholder="Search by name or email"
            class="w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-sm placeholder:text-gray-400 outline-none focus:border-gray-300 focus:ring-2 focus:ring-gray-200"
          />
          <svg class="pointer-events-none absolute right-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m21 21-6-6m2-5a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z" />
          </svg>
        </div>
        <button id="refresh-btn" class="inline-flex items-center gap-2 rounded-md border border-gray-200 bg-white px-3 py-2 text-sm font-medium shadow-sm hover:bg-gray-50 active:scale-[0.99]">
          <span class="inline-flex items-center gap-2" id="refresh-content">
            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v6h6M20 20v-6h-6M20 8a8 8 0 0 0-15.5-2M4 16a8 8 0 0 0 15.5 2" />
            </svg>
            <span>Refresh</span>
          </span>
        </button>
      </div>
    </div>

    <!-- Card -->
    <div class="rounded-xl border border-gray-200 bg-white shadow-sm">
      <!-- Table wrapper -->
      <div class="overflow-x-auto">
        <table class="w-full text-sm text-gray-700">
          <thead class="sticky top-0 z-10 bg-gray-50/80 backdrop-blur supports-[backdrop-filter]:bg-gray-50/60">
            <tr class="border-b border-gray-200 text-gray-600">
              <th class="h-12 px-4 text-left font-medium">Avatar</th>
              <th class="h-12 px-4 text-left font-medium">Name</th>
              <th class="h-12 px-4 text-left font-medium">Email</th>
              <th class="h-12 px-4 text-left font-medium">Joined</th>
              <th class="h-12 px-4 text-left font-medium">Phone</th>
              <th class="h-12 px-4 text-left font-medium">Actions</th>
            </tr>
          </thead>
          <tbody id="customer-table" class="divide-y divide-gray-100">
            <!-- Loading skeleton -->
          </tbody>
        </table>
      </div>

      <!-- Footer / Empty / Error -->
      <div id="table-footer" class="p-4"></div>
    </div>
  </div>

  <!-- Alert Dialog (Confirm Delete) -->
  <div id="confirm-overlay" class="hidden fixed inset-0 z-[55] bg-black/50"></div>
  <div
    id="confirm-dialog"
    role="alertdialog"
    aria-modal="true"
    aria-labelledby="confirm-title"
    aria-describedby="confirm-desc"
    class="hidden fixed inset-0 z-[56] grid place-items-center p-4"
  >
    <div class="w-full max-w-sm rounded-xl border border-gray-200 bg-white shadow-lg">
      <div class="p-4">
        <div class="flex items-start gap-3">
          <div class="mt-0.5 inline-flex h-8 w-8 items-center justify-center rounded-full border border-red-200 bg-red-50 text-red-600">
            <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v4m0 4h.01M12 5a7 7 0 1 0 0 14 7 7 0 0 0 0-14Z"/>
            </svg>
          </div>
          <div class="flex-1">
            <h3 id="confirm-title" class="text-base font-semibold">Delete customer?</h3>
            <p id="confirm-desc" class="mt-1 text-sm text-gray-700">This action cannot be undone. This will permanently delete <span id="confirm-name" class="font-medium"></span>.</p>
          </div>
        </div>
        <div class="mt-4 flex justify-end gap-2">
          <button id="confirm-cancel" class="inline-flex items-center justify-center rounded-md border border-gray-200 bg-white px-3 py-2 text-sm font-medium hover:bg-gray-50">Cancel</button>
          <button id="confirm-delete" class="inline-flex items-center justify-center rounded-md border border-red-200 bg-red-50 px-3 py-2 text-sm font-medium text-red-700 hover:bg-red-100">Delete</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Dialog -->
  <div id="dialog-overlay" class="hidden fixed inset-0 z-50 bg-black/50"></div>
  <div
    id="dialog"
    role="dialog"
    aria-modal="true"
    aria-labelledby="dialog-title"
    class="hidden fixed inset-0 z-50 grid place-items-center p-4"
  >
    <div class="w-full max-w-md rounded-xl border border-gray-200 bg-white shadow-lg">
      <div class="relative">
        <img id="dialog-image" src="" alt="Customer Avatar" class="h-44 w-full rounded-t-xl object-cover object-center bg-gray-100" />
        <button title="Close"
          onclick="closeDialog()"
          class="absolute right-3 top-3 inline-flex h-8 w-8 items-center justify-center rounded-md border border-gray-200 bg-white text-gray-700 hover:bg-gray-50">
          <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 6l12 12M18 6l-12 12"/>
          </svg>
        </button>
      </div>
      <div class="p-4">
        <h2 id="dialog-title" class="text-lg font-semibold"></h2>
        <div class="mt-3 space-y-1.5 text-sm text-gray-700">
          <p><span class="text-gray-500">Email:</span> <span id="dialog-email" class="font-medium"></span></p>
          <p><span class="text-gray-500">Phone:</span> <span id="dialog-phone" class="font-medium"></span></p>
          <p><span class="text-gray-500">Joined:</span> <span id="dialog-joined" class="font-medium"></span></p>
        </div>
        <div class="mt-4 flex justify-end">
          <button onclick="closeDialog()" class="inline-flex items-center justify-center rounded-md border border-gray-200 bg-white px-3 py-2 text-sm font-medium shadow-sm hover:bg-gray-50">Close</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    const placeholderAvatar = "https://api.dicebear.com/7.x/initials/svg?seed=User&backgroundType=gradientLinear&radius=50";

    let customersData = [];
    let isLoading = false;
    let lastError = "";

    const $table = document.getElementById("customer-table");
    const $footer = document.getElementById("table-footer");
    const $count = document.getElementById("count-badge");
    const $search = document.getElementById("search-input");
    const $refresh = document.getElementById("refresh-btn");

    function formatDate(date) {
      try { return new Date(date).toLocaleDateString(); } catch { return "—"; }
    }

    function getAvatar(c) {
      return (c?.avatar || c?.image || placeholderAvatar);
    }

    function getPhone(c) {
      return (c?.Address?.phone || c?.phone || "—");
    }

    function showSkeleton(rows = 6) {
      const skeletonRow = () => `
        <tr class="animate-pulse">
          <td class="px-4 py-4">
            <div class="h-10 w-10 rounded-full bg-gray-200"></div>
          </td>
          <td class="px-4 py-4"><div class="h-4 w-40 rounded bg-gray-200"></div></td>
          <td class="px-4 py-4"><div class="h-4 w-56 rounded bg-gray-200"></div></td>
          <td class="px-4 py-4"><div class="h-4 w-24 rounded bg-gray-200"></div></td>
          <td class="px-4 py-4"><div class="h-4 w-28 rounded bg-gray-200"></div></td>
          <td class="px-4 py-4"><div class="h-8 w-32 rounded bg-gray-200"></div></td>
        </tr>
      `;
      $table.innerHTML = Array.from({ length: rows }).map(skeletonRow).join("");
      $footer.innerHTML = "";
    }

    function renderCustomers(customers) {
      $count.textContent = customers.length;
      if (lastError) {
        $table.innerHTML = `
          <tr>
            <td colspan="6" class="px-4 py-6">
              <div class="flex items-center gap-2 rounded-md border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-700">
                <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v4m0 4h.01M12 5a7 7 0 1 0 0 14 7 7 0 0 0 0-14Z"/></svg>
                <span>${lastError}</span>
              </div>
            </td>
          </tr>
        `;
        $footer.innerHTML = "";
        return;
      }

      if (!customers.length) {
        $table.innerHTML = "";
        $footer.innerHTML = `
          <div class="flex items-center justify-center rounded-lg border border-dashed border-gray-200 bg-gray-50 py-10 text-sm text-gray-600">
            No customers found.
          </div>
        `;
        return;
      }

      $footer.innerHTML = "";
      const rows = customers.map(c => {
        const avatar = getAvatar(c);
        const name = c?.firstname || "Unnamed";
        const email = c?.email || "—";
        const joined = formatDate(c?.createdAt);
        const phone = getPhone(c);
        const id = c?._id || "";

        return `
          <tr class="hover:bg-gray-50/80">
            <td class="px-4 py-3">
              <img src="${avatar}" onerror="this.src='${placeholderAvatar}'" alt="Avatar" class="h-10 w-10 rounded-full ring-1 ring-gray-200 object-cover" />
            </td>
            <td class="px-4 py-3">
              <div class="font-medium">${name}</div>
            </td>
            <td class="px-4 py-3">
              <span class="text-gray-700">${email}</span>
            </td>
            <td class="px-4 py-3">
              <span class="text-gray-700">${joined}</span>
            </td>
            <td class="px-4 py-3">
              <span class="text-gray-700">${phone}</span>
            </td>
            <td class="px-4 py-3">
              <div class="flex items-center gap-2">
                <button
                  class="inline-flex items-center justify-center gap-1 rounded-md border border-gray-200 bg-white px-3 py-1.5 text-sm font-medium shadow-sm hover:bg-gray-50"
                  onclick="openDialog('${encodeURIComponent(avatar)}','${encodeURIComponent(name)}','${encodeURIComponent(email)}','${encodeURIComponent(phone)}','${encodeURIComponent(joined)}')"
                >
                  View
                </button>
                <button
                  class="inline-flex items-center justify-center rounded-md border border-red-200 bg-red-50 px-3 py-1.5 text-sm font-medium text-red-700 hover:bg-red-100"
                  onclick="openDeleteDialog('${id}', '${encodeURIComponent(name)}', this)"
                >
                  Delete
                </button>
              </div>
            </td>
          </tr>
        `;
      }).join("");

      $table.innerHTML = rows;
    }

    const spinnerIcon = '<svg class="h-4 w-4 animate-spin" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true"><circle class="opacity-25" cx="12" cy="12" r="10" stroke-width="4"></circle><path class="opacity-75" d="M4 12a8 8 0 0 1 8-8" stroke-width="4" stroke-linecap="round"></path></svg>';

    function startRefreshLoading() {
      const btn = $refresh;
      if (!btn) return;
      btn.disabled = true;
      const content = document.getElementById('refresh-content');
      if (content) content.innerHTML = `${spinnerIcon}<span>Refreshing...</span>`;
    }

    function stopRefreshLoading() {
      const btn = $refresh;
      if (!btn) return;
      btn.disabled = false;
      const content = document.getElementById('refresh-content');
      if (content) content.innerHTML = `
        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v6h6M20 20v-6h-6M20 8a8 8 0 0 0-15.5-2M4 16a8 8 0 0 0 15.5 2" />
        </svg>
        <span>Refresh</span>
      `;
    }

    async function fetchCustomers(opts = {}) {
      const { fromRefresh = false } = opts;
      try {
        isLoading = true;
        lastError = "";
        showSkeleton();
        if (fromRefresh) startRefreshLoading();
        const res = await fetch("/api/v1/admin/api/customers", { headers: { "Accept": "application/json" } });
        if (!res.ok) throw new Error("Network error");
        const data = await res.json();
        if (!data?.success) throw new Error(data?.message || "Failed to fetch customers");
        customersData = Array.isArray(data.customers) ? data.customers : [];
        applyFilter();
      } catch (err) {
        lastError = err?.message || "Unexpected error";
        renderCustomers([]);
      } finally {
        isLoading = false;
        if (fromRefresh) stopRefreshLoading();
      }
    }

    async function deleteCustomer(id, btnEl) {
      if (!id) return;
      try {
        // button loading state
        if (btnEl) {
          btnEl.disabled = true;
          btnEl.dataset.original = btnEl.innerHTML;
          btnEl.innerHTML = `${spinnerIcon}<span class="ml-2">Deleting...</span>`;
          btnEl.classList.remove('hover:bg-red-100');
        }
        const res = await fetch(`/api/v1/admin/customer/${id}`, { method: "DELETE", headers: { "Accept": "application/json" } });
        const data = await res.json().catch(() => ({}));
        if (!res.ok || !data?.success) throw new Error(data?.message || "Delete failed");
        // lightweight toast
        showToast("Customer deleted");
        await fetchCustomers();
      } catch (err) {
        showToast(err?.message || "Delete failed", true);
        if (btnEl) {
          btnEl.disabled = false;
          btnEl.innerHTML = btnEl.dataset.original || 'Delete';
        }
        return;
      } finally {
        // In success path, table re-renders; if not, restore button
        if (btnEl && !btnEl.isConnected) {
          // no-op; row removed/re-rendered
        } else if (btnEl) {
          btnEl.disabled = false;
          btnEl.innerHTML = btnEl.dataset.original || 'Delete';
        }
      }
    }

    // Delete confirm dialog logic
    let pendingDelete = { id: null, btnEl: null, name: "" };
    function openDeleteDialog(id, nameEnc, btnEl) {
      const name = decodeURIComponent(nameEnc || "");
      pendingDelete = { id, btnEl, name };
      const nameEl = document.getElementById("confirm-name");
      if (nameEl) nameEl.textContent = name || "this customer";
      document.getElementById("confirm-overlay").classList.remove("hidden");
      document.getElementById("confirm-dialog").classList.remove("hidden");
      setTimeout(() => document.getElementById('confirm-cancel')?.focus(), 0);
    }
    function closeDeleteDialog() {
      document.getElementById("confirm-overlay").classList.add("hidden");
      document.getElementById("confirm-dialog").classList.add("hidden");
    }

    function applyFilter() {
      const q = ($search.value || "").toLowerCase().trim();
      if (!q) {
        renderCustomers(customersData);
        return;
      }
      const filtered = customersData.filter(c => {
        const name = (c?.firstname || "").toLowerCase();
        const email = (c?.email || "").toLowerCase();
        return name.includes(q) || email.includes(q);
      });
      renderCustomers(filtered);
    }

    // Dialog controls
    function openDialog(avatarEnc, nameEnc, emailEnc, phoneEnc, joinedEnc) {
      const avatar = decodeURIComponent(avatarEnc);
      const name = decodeURIComponent(nameEnc);
      const email = decodeURIComponent(emailEnc);
      const phone = decodeURIComponent(phoneEnc);
      const joined = decodeURIComponent(joinedEnc);

      document.getElementById("dialog-image").src = avatar || placeholderAvatar;
      document.getElementById("dialog-title").textContent = name;
      document.getElementById("dialog-email").textContent = email;
      document.getElementById("dialog-phone").textContent = phone;
      document.getElementById("dialog-joined").textContent = joined;

      document.getElementById("dialog-overlay").classList.remove("hidden");
      document.getElementById("dialog").classList.remove("hidden");
    }

    function closeDialog() {
      document.getElementById("dialog-overlay").classList.add("hidden");
      document.getElementById("dialog").classList.add("hidden");
    }

    // Simple toast
    function showToast(message, isError = false) {
      const el = document.createElement("div");
      el.className = `fixed bottom-4 left-1/2 z-[60] -translate-x-1/2 rounded-md border px-3 py-2 text-sm shadow-lg ${
        isError ? "border-red-200 bg-red-50 text-red-700" : "border-gray-200 bg-white text-gray-800"
      }`;
      el.textContent = message;
      document.body.appendChild(el);
      setTimeout(() => el.remove(), 2200);
    }

    // Events
    document.addEventListener("DOMContentLoaded", () => {
      fetchCustomers();

      $search.addEventListener("input", () => applyFilter());
  $refresh.addEventListener("click", () => fetchCustomers({ fromRefresh: true }));

      document.getElementById("dialog-overlay").addEventListener("click", closeDialog);
      // Confirm dialog bindings
      document.getElementById('confirm-overlay').addEventListener('click', closeDeleteDialog);
      document.getElementById('confirm-cancel').addEventListener('click', closeDeleteDialog);
      document.getElementById('confirm-delete').addEventListener('click', () => {
        const { id, btnEl } = pendingDelete || {};
        closeDeleteDialog();
        if (id) deleteCustomer(id, btnEl);
      });
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape") {
          closeDialog();
          if (!document.getElementById('confirm-dialog').classList.contains('hidden')) closeDeleteDialog();
        }
      });
    });
  </script>
</body>
