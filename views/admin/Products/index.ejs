<body class="bg-[#fafafa] text-gray-900">
  <div class="w-full min-h-screen mx-auto p-6">
    <div class="mx-auto max-w-7xl">
      <!-- Toolbar / Header -->
      <div class="mb-6">
        <div class="flex items-start justify-between">
          <div class="flex items-start gap-3">
            <div class="mt-1 flex h-9 w-9 items-center justify-center rounded-md border border-slate-200 bg-white text-slate-700">
              <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor"><rect x="3" y="3" width="7" height="7"/><rect x="14" y="3" width="7" height="7"/><rect x="14" y="14" width="7" height="7"/><rect x="3" y="14" width="7" height="7"/></svg>
            </div>
            <div>
              <div class="flex items-center gap-3">
                <h1 class="text-2xl font-semibold tracking-tight">Products</h1>
                <span id="product-count" class="hidden rounded-full border border-slate-200 bg-slate-50 px-2.5 py-0.5 text-xs font-medium text-slate-700">0</span>
              </div>
              <p class="text-sm text-slate-500">Manage products, approvals, and inventory</p>
            </div>
          </div>
          <div class="flex items-center gap-2">
            <button id="refresh-btn"
              class="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-400 disabled:opacity-50 disabled:pointer-events-none h-9 px-4 py-2 border border-slate-200 bg-white hover:bg-slate-50"
              onclick="getProducts()">
              <svg class="mr-2 h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M21 12a9 9 0 1 1-3.32-6.94"/><path d="M21 3v7h-7"/></svg>
              Refresh
            </button>
          </div>
        </div>
      </div>

      <!-- Card -->
      <div class="rounded-lg border border-slate-200 bg-white shadow-sm">
        <!-- Table -->
        <div class="w-full overflow-x-auto">
          <table class="w-full table-auto text-sm">
            <thead class="bg-slate-50 border-b border-slate-200">
              <tr class="text-left text-slate-600">
                <th class="px-4 py-3 font-medium">Photo</th>
                <th class="px-4 py-3 font-medium">Product</th>
                <th class="px-4 py-3 font-medium">Category</th>
                <th class="px-4 py-3 font-medium">Quantity</th>
                <th class="px-4 py-3 font-medium">Price</th>
                <th class="px-4 py-3 font-medium">Stock</th>
                <th class="px-4 py-3 font-medium">Status</th>
                <th class="px-4 py-3 font-medium">Actions</th>
              </tr>
            </thead>
            <tbody id="product-table" class="divide-y divide-slate-200">
              <!-- Rows injected dynamically -->
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Toasts -->
    <div class="notification-container fixed top-5 right-5 z-50 space-y-2"></div>

    <!-- View Dialog -->
    <div id="dialog-view" class="hidden fixed inset-0 z-40 items-center justify-center bg-black/40">
      <div class="relative mx-4 w-full max-w-md rounded-lg border border-slate-200 bg-white shadow-lg">
        <div class="flex items-center justify-between border-b border-slate-200 px-4 py-3">
          <h3 class="text-base font-semibold">Product details</h3>
          <button class="rounded-md p-1.5 hover:bg-slate-50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-400" onclick="closeDialog('dialog-view')" aria-label="Close">
            <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M18 6L6 18M6 6l12 12"/></svg>
          </button>
        </div>
        <div class="p-4">
          <img id="view-image" src="" class="mb-4 h-52 w-full rounded-md object-cover object-center border border-slate-200" alt="Product Image">
          <div class="space-y-2 text-sm">
            <div class="flex justify-between"><span class="text-slate-500">Title</span><span id="view-title" class="font-medium"></span></div>
            <div class="flex justify-between"><span class="text-slate-500">Category</span><span id="view-category" class="font-medium"></span></div>
            <div class="flex justify-between"><span class="text-slate-500">Quantity</span><span id="view-quantity" class="font-medium"></span></div>
            <div class="flex justify-between"><span class="text-slate-500">Price</span><span id="view-price" class="font-medium"></span></div>
            <div class="flex justify-between"><span class="text-slate-500">Stock</span><span id="view-stock" class="font-medium"></span></div>
          </div>
        </div>
        <div class="flex justify-end gap-2 border-t border-slate-200 px-4 py-3">
          <button class="inline-flex h-9 items-center justify-center rounded-md border border-slate-200 bg-white px-4 text-sm font-medium hover:bg-slate-50"
            onclick="closeDialog('dialog-view')">Close</button>
        </div>
      </div>
    </div>

    <!-- Confirm Dialog -->
    <div id="dialog-confirm" class="hidden fixed inset-0 z-50 items-center justify-center bg-black/40">
      <div class="relative mx-4 w-full max-w-md rounded-lg border border-slate-200 bg-white shadow-lg">
        <div class="px-4 pt-4">
          <div class="flex items-start gap-3">
            <div class="mt-0.5 rounded-full bg-amber-100 p-2 text-amber-700">
              <svg class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor"><circle cx="12" cy="12" r="10"/><path d="M12 8v4"/><path d="M12 16h.01"/></svg>
            </div>
            <div>
              <h3 id="confirm-title" class="text-base font-semibold">Are you sure?</h3>
              <p id="confirm-description" class="mt-1 text-sm text-slate-600">This action cannot be undone.</p>
            </div>
          </div>
        </div>
        <div class="mt-4 flex justify-end gap-2 border-t border-slate-200 px-4 py-3">
          <button id="confirm-cancel"
            class="inline-flex h-9 items-center justify-center rounded-md border border-slate-200 bg-white px-4 text-sm font-medium hover:bg-slate-50"
            onclick="closeDialog('dialog-confirm')">Cancel</button>
          <button id="confirm-action"
            class="inline-flex h-9 items-center justify-center rounded-md bg-red-600 px-4 text-sm font-medium text-white hover:bg-red-600/90 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-400 disabled:opacity-50 disabled:pointer-events-none"
            data-loading="false">
            <span class="inline-flex items-center">
              <svg class="mr-2 hidden h-4 w-4 animate-spin" viewBox="0 0 24 24" fill="none" stroke="currentColor"><circle cx="12" cy="12" r="10" class="opacity-25"/><path d="M12 2a10 10 0 0 1 10 10" class="opacity-75"/></svg>
              <span id="confirm-action-text">Continue</span>
            </span>
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Toasts (shadcn-like)
    function showNotification(message, type = "success") {
      let container = document.querySelector(".notification-container");
      if (!container) {
        container = document.createElement("div");
        container.className = "notification-container fixed top-5 right-5 z-50 space-y-2";
        document.body.appendChild(container);
      }

      const el = document.createElement("div");
      el.className = "pointer-events-auto flex items-start gap-3 rounded-md border px-4 py-3 shadow-lg transition-all " +
        (type === "success"
          ? "border-emerald-200 bg-emerald-50 text-emerald-900"
          : "border-red-200 bg-red-50 text-red-900");
      el.innerHTML = `
        <div class="mt-0.5">${type === "success"
          ? '<svg class="h-5 w-5 text-emerald-600" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M20 6L9 17l-5-5"/></svg>'
          : '<svg class="h-5 w-5 text-red-600" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M18 6L6 18M6 6l12 12"/></svg>'}</div>
        <div class="text-sm">${message}</div>
      `;
      container.appendChild(el);
      requestAnimationFrame(() => {
        el.classList.add("translate-x-0", "opacity-100");
      });
      setTimeout(() => {
        el.classList.add("opacity-0", "translate-y-1");
        setTimeout(() => el.remove(), 200);
      }, 2200);
    }

    // Dialog helpers
    function openDialog(id) {
      const dlg = document.getElementById(id);
      if (!dlg) return;
      dlg.classList.remove("hidden");
      dlg.classList.add("flex");
    }
    function closeDialog(id) {
      const dlg = document.getElementById(id);
      if (!dlg) return;
      dlg.classList.add("hidden");
      dlg.classList.remove("flex");
    }

    // Confirm dialog control
    let confirmState = { onConfirm: null };
    function setConfirmDialog({ title, description, actionText = "Continue", onConfirm, variant = "destructive" }) {
      document.getElementById("confirm-title").textContent = title || "Are you sure?";
      document.getElementById("confirm-description").textContent = description || "This action cannot be undone.";
      const actionBtn = document.getElementById("confirm-action");
      const actionTextEl = document.getElementById("confirm-action-text");
      actionTextEl.textContent = actionText;

      // style by variant
      if (variant === "destructive") {
        actionBtn.className = "inline-flex h-9 items-center justify-center rounded-md bg-red-600 px-4 text-sm font-medium text-white hover:bg-red-600/90 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-400 disabled:opacity-50 disabled:pointer-events-none";
      } else {
        actionBtn.className = "inline-flex h-9 items-center justify-center rounded-md bg-slate-900 px-4 text-sm font-medium text-white hover:bg-slate-900/90 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-400 disabled:opacity-50 disabled:pointer-events-none";
      }

      confirmState.onConfirm = async () => {
        await onConfirm?.(actionBtn);
      };

      actionBtn.onclick = async () => {
        await confirmState.onConfirm?.();
      };

      openDialog("dialog-confirm");
    }

    // Button loading helper
    function setButtonLoading(btn, isLoading, loadingText) {
      if (!btn) return;
      const spinner = btn.querySelector("svg.animate-spin");
      const textNode = btn.querySelector(".btn-text") || btn.querySelector("#confirm-action-text") || btn;
      if (spinner) spinner.classList.toggle("hidden", !isLoading);
      btn.disabled = !!isLoading;
      if (loadingText && textNode) {
        if (!btn.dataset.originalText) btn.dataset.originalText = textNode.textContent;
        textNode.textContent = isLoading ? loadingText : btn.dataset.originalText || textNode.textContent;
      }
    }

    // Render skeleton rows while loading
    function renderSkeletonRows(count = 6) {
      const tbody = document.getElementById("product-table");
      tbody.innerHTML = "";
      for (let i = 0; i < count; i++) {
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td class="px-4 py-3"><div class="h-10 w-10 rounded-full bg-slate-200 animate-pulse"></div></td>
          <td class="px-4 py-3"><div class="h-4 w-40 rounded bg-slate-200 animate-pulse"></div></td>
          <td class="px-4 py-3"><div class="h-4 w-24 rounded bg-slate-200 animate-pulse"></div></td>
          <td class="px-4 py-3"><div class="h-4 w-16 rounded bg-slate-200 animate-pulse"></div></td>
          <td class="px-4 py-3"><div class="h-4 w-16 rounded bg-slate-200 animate-pulse"></div></td>
          <td class="px-4 py-3"><div class="h-4 w-10 rounded bg-slate-200 animate-pulse"></div></td>
          <td class="px-4 py-3"><div class="h-6 w-20 rounded bg-slate-200 animate-pulse"></div></td>
          <td class="px-4 py-3"><div class="h-8 w-40 rounded bg-slate-200 animate-pulse"></div></td>
        `;
        tbody.appendChild(tr);
      }
    }

    // HTML escape helper
    function escapeHtml(str = "") {
      return String(str)
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    }

    // Render products
    function renderProducts(products) {
      const tbody = document.getElementById("product-table");
      tbody.innerHTML = "";
      const countEl = document.getElementById("product-count");
      if (countEl) {
        countEl.textContent = products.length;
        countEl.classList.toggle("hidden", products.length === 0);
      }
      products.forEach((product) => {
        const verifiedBadge = product.verified
          ? `<span class="inline-flex items-center rounded-full border border-emerald-200 bg-emerald-50 px-2.5 py-0.5 text-xs font-medium text-emerald-700">Verified</span>`
          : `<span class="inline-flex items-center rounded-full border border-slate-200 bg-slate-50 px-2.5 py-0.5 text-xs font-medium text-slate-700">Pending</span>`;

        const row = document.createElement("tr");
        row.className = "hover:bg-slate-50";
        row.innerHTML = `
          <td class="px-4 py-3">
            <img src="${product.image}" alt="Avatar" class="h-10 w-10 rounded-full border border-slate-200 object-cover"/>
          </td>
          <td class="px-4 py-3 font-medium">${escapeHtml(product.title)}</td>
          <td class="px-4 py-3">${escapeHtml(product.category)}</td>
          <td class="px-4 py-3">${product.quantity}</td>
          <td class="px-4 py-3">₹ ${product.price}</td>
          <td class="px-4 py-3">${product.stock?.toString?.() || product.stock}</td>
          <td class="px-4 py-3">${verifiedBadge}</td>
          <td class="px-4 py-3">
            <div class="flex flex-wrap items-center gap-2">
              <button id="view-btn-${product._id}"
                class="inline-flex items-center justify-center rounded-md border border-slate-200 bg-white px-3 py-1.5 text-xs font-medium hover:bg-slate-50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-400"
                onclick="viewProduct('${encodeURIComponent(product.image)}', '${encodeURIComponent(product.title)}', '${encodeURIComponent(product.category)}', '${product.quantity}', '${product.price}', '${product.stock}')">
                <svg class="mr-1.5 h-3.5 w-3.5" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/><circle cx="12" cy="12" r="3"/></svg>
                <span class="btn-text">View</span>
              </button>

              ${product.verified
                ? `<button id="unverify-btn-${product._id}"
                    class="inline-flex items-center justify-center rounded-md bg-amber-600 px-3 py-1.5 text-xs font-medium text-white hover:bg-amber-600/90 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-400"
                    onclick="confirmDisapprove('${product._id}', '${escapeHtml(product.title)}')">
                    <svg class="mr-1.5 h-3.5 w-3.5" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M12 8v8"/><path d="M8 12h8"/></svg>
                    <span class="btn-text">Unverify</span>
                  </button>`
        : `<button id="approve-btn-${product._id}"
          class="inline-flex items-center justify-center rounded-md bg-emerald-600 px-3 py-1.5 text-xs font-medium text-white hover:bg-emerald-600/90 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-emerald-400 disabled:opacity-50 disabled:pointer-events-none"
                    onclick="approveProduct('${product._id}')">
                    <svg class="mr-1.5 hidden h-3.5 w-3.5 animate-spin" viewBox="0 0 24 24" fill="none" stroke="currentColor"><circle cx="12" cy="12" r="10" class="opacity-25"/><path d="M12 2a10 10 0 0 1 10 10" class="opacity-75"/></svg>
                    <span class="btn-text">Approve</span>
                  </button>`}

              <button id="delete-btn-${product._id}"
                class="inline-flex items-center justify-center rounded-md border border-red-200 bg-red-50 px-3 py-1.5 text-xs font-medium text-red-700 hover:bg-red-100 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-red-200 disabled:opacity-50 disabled:pointer-events-none"
                onclick="confirmDelete('${product._id}', '${escapeHtml(product.title)}')">
                <svg class="mr-1.5 h-3.5 w-3.5" viewBox="0 0 24 24" fill="none" stroke="currentColor"><polyline points="3 6 5 6 21 6"/><path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6"/><path d="M10 11v6"/><path d="M14 11v6"/></svg>
                <span class="btn-text">Delete</span>
              </button>
            </div>
          </td>
        `;
        tbody.appendChild(row);
      });
    }

    // API calls
    function getProducts() {
      renderSkeletonRows(6);
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4) {
          if (this.status == 200) {
            try {
              var data = JSON.parse(this.responseText);
              renderProducts(data.products || []);
            } catch (err) {
              document.getElementById("product-table").innerHTML = "";
              showNotification("Failed to load products", "error");
            }
          } else {
            document.getElementById("product-table").innerHTML = "";
            showNotification("Failed to load products", "error");
          }
        }
      };
      xhttp.open("GET", "http://localhost:8000/api/v1/admin/products/details", true);
      xhttp.withCredentials = true;
      xhttp.send();
    }

    function approveProduct(id) {
      const btn = document.getElementById(`approve-btn-${id}`);
      setButtonLoading(btn, true, "Approving...");
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4) {
          setButtonLoading(btn, false);
          if (this.status == 200) {
            try {
              var data = JSON.parse(this.responseText);
              if (!data.success) throw new Error(data?.message || "Failed to approve product");
              showNotification(data.message || "Product approved", "success");
              getProducts();
            } catch (err) {
              showNotification(err.message || "Failed to approve product", "error");
            }
          } else {
            showNotification("Failed to approve product", "error");
          }
        }
      };
      xhttp.open("GET", `/api/v1/admin/product/approve/${id}`, true);
      xhttp.withCredentials = true;
      xhttp.send();
    }

    function confirmDisapprove(id, title) {
      setConfirmDialog({
        title: "Unverify product?",
        description: `This will mark \"${title}\" as unverified.`,
        actionText: "Unverify",
        variant: "default",
        onConfirm: function(actionBtn) {
          setButtonLoading(actionBtn, true, "Unverifying...");
          var xhttp = new XMLHttpRequest();
          xhttp.onreadystatechange = function() {
            if (this.readyState == 4) {
              setButtonLoading(actionBtn, false);
              if (this.status == 200) {
                try {
                  var data = JSON.parse(this.responseText);
                  if (!data.success) throw new Error(data && data.message ? data.message : "Failed to unverify product");
                  showNotification(data.message || "Product unverified", "success");
                  closeDialog("dialog-confirm");
                  getProducts();
                } catch (err) {
                  showNotification(err.message || "Failed to unverify product", "error");
                }
              } else {
                showNotification("Failed to unverify product", "error");
              }
            }
          };
          xhttp.open("GET", `/api/v1/admin/product/disapprove/${id}` , true);
          xhttp.withCredentials = true;
          xhttp.send();
        }
      });
    }

    function confirmDelete(id, title) {
      setConfirmDialog({
        title: "Delete product?",
        description: `This will permanently delete \"${title}\".`,
        actionText: "Delete",
        variant: "destructive",
        onConfirm: function(actionBtn) {
          setButtonLoading(actionBtn, true, "Deleting...");
          var xhttp = new XMLHttpRequest();
          xhttp.onreadystatechange = function() {
            if (this.readyState == 4) {
              setButtonLoading(actionBtn, false);
              if (this.status == 200) {
                showNotification("Product deleted", "success");
                closeDialog("dialog-confirm");
                getProducts();
              } else {
                showNotification("Failed to delete product", "error");
              }
            }
          };
          xhttp.open("DELETE", `http://localhost:8000/api/v1/admin/product/${id}` , true);
          xhttp.withCredentials = true;
          xhttp.send();
        }
      });
    }

    function viewProduct(image, title, category, quantity, price, stock) {
      const img = decodeURIComponent(image);
      const t = decodeURIComponent(title);
      const c = decodeURIComponent(category);
      document.getElementById("view-image").src = img;
      document.getElementById("view-title").innerText = t;
      document.getElementById("view-category").innerText = c;
      document.getElementById("view-quantity").innerText = quantity;
      document.getElementById("view-price").innerText = price;
      document.getElementById("view-stock").innerText = stock;
      openDialog("dialog-view");
    }

    document.addEventListener("DOMContentLoaded", () => getProducts());
  </script>
</body>
