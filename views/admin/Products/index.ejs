<body class="bg-gray-100">
  <div class="w-full min-h-screen mx-auto bg-white shadow-md rounded-lg p-6 relative">
    <!-- Header -->
    <div class="flex justify-between items-center mb-4">
      <h1 class="text-xl font-bold">Products</h1>
    </div>
    <div id="flash-message" class="hidden fixed top-4 left-1/2 transform -translate-x-1/2 px-4 py-2 rounded shadow-md transition-opacity duration-500 opacity-0">
      Success!
    </div>
    <!-- Table -->
    <div class="overflow-x-auto">
      <table class="w-full border-collapse bg-white text-left text-sm text-gray-700">
        <thead class="bg-gray-100">
          <tr>
            <th class="px-4 py-2">Photo</th>
            <th class="px-4 py-2">Product Name</th>
            <th class="px-4 py-2">Category</th>
            <th class="px-4 py-2">Quantity</th>
            <th class="px-4 py-2">Price</th>
            <th class="px-4 py-2">Stock</th>
            <th class="px-4 py-2">Verfied</th>
            <th class="px-4 py-2">Actions</th>
          </tr>
        </thead>
        <tbody id="customer-table">
          <!-- Rows will be injected dynamically -->
        </tbody>
      </table>
    </div>
    
    <!-- Popover -->
    <div id="popover" class="hidden fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50">
      <div class="bg-white shadow-lg rounded-lg p-6 w-96 border relative">
        <img id="popover-image" src="" class="w-full h-56 object-cover
        object-top rounded-lg mb-4" alt="Product Image">
        <h3 class="font-bold text-lg mb-2" id="popover-title"></h3>
        <p><strong>Category:</strong> <span id="popover-category"></span></p>
        <p><strong>Quantity:</strong> <span id="popover-quantity"></span></p>
        <p><strong>Price:</strong> <span id="popover-price"></span></p>
        <p><strong>Stock:</strong> <span id="popover-stock"></span></p>
        <button onclick="closePopover()" class="mt-4 px-4 py-2 bg-gray-500 text-white rounded-md text-sm">Close</button>
      </div>
    </div>
  </div>

  <script>
    function showNotification(message, type) {
  // Check if notification container exists, if not create it
  let notificationContainer = document.querySelector(".notification-container")

  if (!notificationContainer) {
    notificationContainer = document.createElement("div")
    notificationContainer.className = "fixed top-5 right-5 z-50 space-y-2"
    document.body.appendChild(notificationContainer)
  }

  // Create notification element
  const notification = document.createElement("div")
  notification.className = `px-4 py-2 rounded-md shadow-md text-white transition-transform transform translate-x-full opacity-0 ${
    type === "success" ? "bg-green-500" : "bg-red-500"
  }`
  notification.textContent = message

  // Append notification and trigger animation
  notificationContainer.appendChild(notification)
  setTimeout(() => {
    notification.classList.remove("translate-x-full", "opacity-0")
    notification.classList.add("translate-x-0", "opacity-100")
  }, 10)

  // Remove notification after 3 seconds
  setTimeout(() => {
    notification.classList.add("opacity-0", "translate-x-full")
    setTimeout(() => {
      notification.remove()
    }, 200)
  }, 2000)
}

    function getProducts() {
      const xhttp = new XMLHttpRequest();
      xhttp.onload = function() {
        if (this.status === 200) {
          const data = JSON.parse(this.responseText);
          console.log(data);
          displayCustomers(data.products);
        } else {
          showNotification("Failed to load products", "error");
        }
      };
      xhttp.onerror = function() {
        showNotification("Error connecting to server", "error");
      };
      xhttp.open("GET", "http://localhost:8000/api/v1/admin/products/details", true);
      xhttp.send();
    }

    function displayCustomers(products) {
      const table = document.getElementById("customer-table");
      table.innerHTML = "";

      products.forEach((product) => {
        const row = `<tr class='border-t hover:bg-gray-50'>
          <td class='px-4 py-2'><img src="${product.image}" class="rounded-full w-10 h-10" alt="Avatar"></td>
          <td class='px-4 py-2'>${product.title}</td>
          <td class='px-4 py-2'>${product.category}</td>
          <td class='px-4 py-2'>${product.quantity}</td>
          <td class='px-4 py-2'>${product.price}</td>
          <td class='px-4 py-2'>${product.stock.toString()}</td>
          <td class='px-4 py-2'>
      ${product.verified
        ? `<span class="badge bg-success disabled cursor-pointer" onclick="disApproveProduct('${product._id}')" >Verified</span>`
        : `<button  class="badge bg-danger" onclick="approveProduct('${product._id}')">Approve</button>`
      }
    </td>
    
          <td class='px-4 py-2'>
            <button class="px-2 py-1 bg-blue-500 text-white rounded-md text-xs" onclick="viewProduct('${product.image}', '${product.title}', '${product.category}', '${product.quantity}', '${product.price}', '${product.stock}')">View</button>
            <button class="px-2 py-1 bg-red-500 text-white rounded-md text-xs" onclick="deleteCustomer('${product._id}')">Delete</button>
          </td>
        </tr>`;
        table.innerHTML += row;
      });
    }

    function viewProduct(image, title, category, quantity, price, stock) {
      document.getElementById("popover-image").src = image;
      document.getElementById("popover-title").innerText = title;
      document.getElementById("popover-category").innerText = category;
      document.getElementById("popover-quantity").innerText = quantity;
      document.getElementById("popover-price").innerText = price;
      document.getElementById("popover-stock").innerText = stock;
      document.getElementById("popover").classList.remove("hidden");
    }

    function closePopover() {
      document.getElementById("popover").classList.add("hidden");
    }

    function deleteCustomer(id) {
      if (confirm("Are you sure you want to delete this customer?")) {
        const xhttp = new XMLHttpRequest();
        xhttp.onload = function() {
          if (this.status === 200) {
            getProducts();
          } else {
            showNotification("Failed to delete product", "error");
          }
        };
        xhttp.onerror = function() {
          showNotification("Error connecting to server", "error");
        };
        xhttp.open("DELETE", `http://localhost:8000/api/v1/admin/product/${id}`, true);
        xhttp.send();
      }
    }
    
    function approveProduct(id){
      const xhttp = new XMLHttpRequest();
      xhttp.onload = function() {
        if (this.status === 200) {
          const data = JSON.parse(this.responseText);
          if(data.success){
            showNotification(data.message, "success");
            getProducts();
          } else {
            showNotification(data.message, "error");
          }
        } else {
          showNotification("Failed to approve product", "error");
        }
      };
      xhttp.onerror = function() {
        showNotification("Error connecting to server", "error");
      };
      xhttp.open("GET", `/api/v1/admin/product/approve/${id}`, true);
      xhttp.send();
    }

    function disApproveProduct(id){
      const xhttp = new XMLHttpRequest();
      xhttp.onload = function() {
        if (this.status === 200) {
          const data = JSON.parse(this.responseText);
          if(data.success){
            showNotification(data.message, "success");
            getProducts();
          } else {
            showNotification(data.message, "error");
          }
        } else {
          showNotification("Failed to disapprove product", "error");
        }
      };
      xhttp.onerror = function() {
        showNotification("Error connecting to server", "error");
      };
      xhttp.open("GET", `/api/v1/admin/product/disapprove/${id}`, true);
      xhttp.send();
    }
   document.addEventListener("DOMContentLoaded",()=>getProducts()) 
  </script>
</body>
