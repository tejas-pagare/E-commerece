<body class="bg-gray-100 text-gray-900">
  <div class="min-h-screen">
    <!-- Improved Header -->
    <header class="sticky top-0 z-40 w-full border-b bg-white/80 backdrop-blur supports-[backdrop-filter]:bg-white/60">
      <div class="max-w-7xl mx-auto px-6 py-5 flex items-center justify-between">
        <div class="flex items-start gap-3">
          <div class="h-10 w-10 rounded-md bg-gradient-to-br from-blue-600 to-indigo-600 flex items-center justify-center shadow-sm">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" viewBox="0 0 24 24" fill="currentColor">
              <path d="M16 11V7a4 4 0 10-8 0v4H5l1.4 8.4A2 2 0 008.38 21h7.24a2 2 0 001.98-1.6L19 11h-3zM10 7a2 2 0 114 0v4h-4V7z"/>
            </svg>
          </div>
          <div>
            <h1 class="text-2xl font-semibold tracking-tight">Sellers</h1>
            <p class="text-sm text-gray-500">Manage seller verification, details, and actions</p>
          </div>
        </div>
        <div class="flex items-center gap-2">
          <button id="refresh-btn" data-idle="Refresh" data-loading="Refreshing..."
            class="inline-flex items-center justify-center gap-2 rounded-md border border-gray-200 bg-white px-3 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-gray-50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:opacity-60 disabled:cursor-not-allowed">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 opacity-80" viewBox="0 0 24 24" fill="currentColor">
              <path d="M12 6V3L8 7l4 4V8c2.76 0 5 2.24 5 5a5.002 5.002 0 01-8.66 3.32l-1.42 1.42A7 7 0 0019 13c0-3.87-3.13-7-7-7z"/>
            </svg>
            <span class="btn-label">Refresh</span>
          </button>
        </div>
      </div>
    </header>

    <div class="max-w-7xl mx-auto px-6 py-6">
      <div class="w-full bg-white border border-gray-200 shadow-sm rounded-lg">
        <div class="p-6 border-b">
          <h2 class="text-lg font-medium">Seller List</h2>
          <p class="text-sm text-gray-500">Review, verify, and manage sellers</p>
        </div>

        <!-- Flash/Toast Container -->
        <div class="notification-container fixed top-5 right-5 z-50 space-y-2"></div>

        <!-- Table -->
        <div class="overflow-x-auto">
          <table class="w-full bg-white text-left text-sm">
            <thead class="bg-gray-50/80">
              <tr class="border-b">
                <th class="px-4 py-3 font-medium text-gray-600">Avatar</th>
                <th class="px-4 py-3 font-medium text-gray-600">Name</th>
                <th class="px-4 py-3 font-medium text-gray-600">StoreName</th>
                <th class="px-4 py-3 font-medium text-gray-600">Email</th>
                <th class="px-4 py-3 font-medium text-gray-600">Gstn</th>
                <th class="px-4 py-3 font-medium text-gray-600">AadharCard</th>
                <th class="px-4 py-3 font-medium text-gray-600">BankName</th>
                <th class="px-4 py-3 font-medium text-gray-600">Verified</th>
                <th class="px-4 py-3 font-medium text-gray-600">Actions</th>
              </tr>
            </thead>
            <tbody id="customer-table" class="divide-y divide-gray-100">
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- View Dialog (shadcn-like) -->
  <div id="view-dialog" class="fixed inset-0 z-50 hidden items-center justify-center">
    <div class="fixed inset-0 bg-black/50" data-close="view"></div>
    <div class="relative w-full max-w-lg bg-white rounded-lg shadow-lg border border-gray-200">
      <div class="p-6">
        <div class="flex items-center justify-between">
          <h2 class="text-lg font-semibold">Seller Details</h2>
          <button class="rounded-md p-2 hover:bg-gray-100 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2" data-close="view" aria-label="Close">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" viewBox="0 0 24 24" fill="currentColor">
              <path d="M18.3 5.71L12 12.01l-6.3-6.3-1.4 1.41 6.29 6.29-6.3 6.3 1.41 1.41 6.3-6.29 6.29 6.29 1.41-1.41-6.29-6.3 6.3-6.29z"/>
            </svg>
          </button>
        </div>
        <div id="view-content" class="mt-4 space-y-2"></div>
      </div>
      <div class="flex justify-end gap-2 border-t p-4">
        <button class="inline-flex items-center justify-center rounded-md border border-gray-200 bg-white px-4 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-gray-50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2" data-close="view">
          Close
        </button>
      </div>
    </div>
  </div>

  <!-- Alert Dialog (shadcn-like) -->
  <div id="alert-dialog" class="fixed inset-0 z-50 hidden items-center justify-center">
    <div class="fixed inset-0 bg-black/50" data-close="alert"></div>
    <div role="alertdialog" aria-modal="true" aria-labelledby="alert-title" aria-describedby="alert-description"
         class="relative w-full max-w-md bg-white rounded-lg shadow-lg border border-gray-200">
      <div class="p-6">
        <h2 id="alert-title" class="text-lg font-semibold">Are you absolutely sure?</h2>
        <p id="alert-description" class="mt-2 text-sm text-gray-600">This action cannot be undone.</p>
      </div>
      <div class="flex justify-end gap-2 border-t p-4">
        <button id="alert-cancel"
          class="inline-flex items-center justify-center rounded-md border border-gray-200 bg-white px-4 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-gray-50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2">
          Cancel
        </button>
        <button id="alert-confirm"
          class="inline-flex items-center justify-center rounded-md bg-red-600 text-white px-4 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-red-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-red-500 focus-visible:ring-offset-2">
          Continue
        </button>
      </div>
    </div>
  </div>

  <script>
    // State
    window.__sellers = new Map();
    let __pendingAction = null; // { type: 'approve'|'delete', id: string }
    let __listLoading = false;

    // Toast-like notification
    function showNotification(message, type) {
      let container = document.querySelector('.notification-container');
      if (!container) {
        container = document.createElement('div');
        container.className = 'notification-container fixed top-5 right-5 z-50 space-y-2';
        document.body.appendChild(container);
      }
      const el = document.createElement('div');
      const isSuccess = type === 'success';
      el.className =
        'flex items-start gap-3 rounded-md border px-4 py-3 shadow-lg bg-white text-gray-900 border-gray-200 ' +
        'transition-all duration-300 transform translate-x-6 opacity-0';
      el.innerHTML = `
        <div class="h-2.5 w-2.5 mt-1 rounded-full ${isSuccess ? 'bg-green-500' : 'bg-red-500'}"></div>
        <div class="text-sm">${message}</div>
      `;
      container.appendChild(el);
      requestAnimationFrame(() => {
        el.classList.remove('translate-x-6', 'opacity-0');
      });
      setTimeout(() => {
        el.classList.add('opacity-0', 'translate-x-6');
        setTimeout(() => el.remove(), 200);
      }, 2200);
    }

    // Button loading helper (shadcn-like)
    function setButtonLoading(button, isLoading, loadingText) {
      if (!button) return;
      const labelEl = button.querySelector('.btn-label');
      const idleText = button.dataset.idle || (labelEl ? labelEl.textContent : button.textContent);
      const loadingLabel = loadingText || button.dataset.loading || 'Loading...';
      if (isLoading) {
        button.disabled = true;
        button.setAttribute('aria-busy', 'true');
        const spinner = `<svg class="h-4 w-4 animate-spin" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
          </svg>`;
        if (labelEl) labelEl.textContent = loadingLabel; else button.textContent = loadingLabel;
        if (!button.querySelector('.animate-spin')) {
          button.insertAdjacentHTML('afterbegin', spinner);
        }
      } else {
        button.disabled = false;
        button.removeAttribute('aria-busy');
        const spin = button.querySelector('.animate-spin');
        if (spin) spin.remove();
        if (labelEl) labelEl.textContent = idleText; else button.textContent = idleText;
      }
    }

    // Render skeleton rows while loading
    function renderSkeletonRows(count = 6) {
      const table = document.getElementById('customer-table');
      let rows = '';
      for (let i = 0; i < count; i++) {
        rows += `
          <tr class="animate-pulse">
            <td class="px-4 py-3"><div class="h-12 w-12 rounded-md bg-gray-200"></div></td>
            <td class="px-4 py-3">
              <div class="h-4 w-28 rounded bg-gray-200 mb-1"></div>
              <div class="h-3 w-24 rounded bg-gray-200"></div>
            </td>
            <td class="px-4 py-3"><div class="h-4 w-24 rounded bg-gray-200"></div></td>
            <td class="px-4 py-3"><div class="h-4 w-40 rounded bg-gray-200"></div></td>
            <td class="px-4 py-3"><div class="h-4 w-20 rounded bg-gray-200"></div></td>
            <td class="px-4 py-3"><div class="h-6 w-24 rounded-full bg-gray-200"></div></td>
            <td class="px-4 py-3"><div class="h-4 w-24 rounded bg-gray-200"></div></td>
            <td class="px-4 py-3"><div class="h-6 w-20 rounded-full bg-gray-200"></div></td>
            <td class="px-4 py-3">
              <div class="flex items-center gap-2">
                <div class="h-7 w-14 rounded-md bg-gray-200"></div>
                <div class="h-7 w-14 rounded-md bg-gray-200"></div>
              </div>
            </td>
          </tr>`;
      }
      table.innerHTML = rows;
    }

    function toggleListLoading(isLoading) {
      __listLoading = isLoading;
      const refreshBtn = document.getElementById('refresh-btn');
      setButtonLoading(refreshBtn, isLoading, refreshBtn?.dataset?.loading || 'Refreshing...');
      if (isLoading) renderSkeletonRows();
    }

    // Data fetching and rendering
    function RenderSellers() {
      toggleListLoading(true);
      const xhttp = new XMLHttpRequest();
      xhttp.onload = function () {
        let data = {};
        try { data = JSON.parse(this.responseText || '{}'); } catch (e) {}
        const sellers = data.sellers || [];
        const table = document.getElementById('customer-table');
        window.__sellers = new Map();
        let row = '';
        sellers.forEach((e) => {
          window.__sellers.set(e._id, e);
          row += `
            <tr class="hover:bg-gray-50/60">
              <td class="px-4 py-3">
                <img src="${e.profileImage}" alt="logo" class="h-12 w-12 rounded-md border border-gray-200 object-cover">
              </td>
              <td class="px-4 py-3">
                <div class="font-medium">${e.name || '-'}</div>
                <div class="text-xs text-gray-500">${e._id || ''}</div>
              </td>
              <td class="px-4 py-3">${e.storeName || '-'}</td>
              <td class="px-4 py-3">${e.email || '-'}</td>
              <td class="px-4 py-3">${e.gstn || '-'}</td>
              <td class="px-4 py-3">
                ${e.identityVerification?.aadharCard
                  ? `<a title="Aadhar proof" href="${e.identityVerification.aadharCard}" target="_blank" rel="noopener noreferrer"
                       class="inline-flex items-center rounded-full border px-3 py-1 text-xs font-medium bg-green-50 text-green-700 border-green-200 hover:bg-green-100">
                       Aadhar Proof
                     </a>`
                  : `<span class="inline-flex items-center rounded-full border px-3 py-1 text-xs font-medium bg-gray-50 text-gray-600 border-gray-200">N/A</span>`
                }
              </td>
              <td class="px-4 py-3">${e.bankDetails?.bankName || '-'}</td>
              <td class="px-4 py-3">
                ${e.identityVerification?.status === 'Verified'
                  ? `<span class="inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold bg-green-50 text-green-700 border-green-200">Verified</span>`
                  : `<button data-action="approve" data-id="${e._id}"
                        class="inline-flex items-center justify-center gap-2 rounded-md bg-blue-600 text-white px-3 py-1.5 text-xs font-medium shadow-sm transition-colors hover:bg-blue-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2">
                        <span class="btn-label">Approve</span>
                     </button>`
                }
              </td>
              <td class="px-4 py-3">
                <div class="flex items-center gap-2">
                  <button data-action="view" data-id="${e._id}"
                    class="inline-flex items-center justify-center gap-2 rounded-md border border-gray-200 bg-white px-3 py-1.5 text-xs font-medium shadow-sm transition-colors hover:bg-gray-50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2">
                    <span class="btn-label">View</span>
                  </button>
                  <button data-action="delete" data-id="${e._id}"
                    class="inline-flex items-center justify-center gap-2 rounded-md bg-red-600 text-white px-3 py-1.5 text-xs font-medium shadow-sm transition-colors hover:bg-red-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-red-500 focus-visible:ring-offset-2">
                    <span class="btn-label">Delete</span>
                  </button>
                </div>
              </td>
            </tr>`;
        });
        table.innerHTML = row;
        toggleListLoading(false);
      };
      xhttp.onerror = function () {
        toggleListLoading(false);
        showNotification('Failed to load sellers', 'error');
      };
      xhttp.open('GET', '/api/v1/admin/api/sellers', true);
      xhttp.send();
    }

    // API calls
    function approveSeller(id) {
      // loadDoc-style XHR
      const xhttp = new XMLHttpRequest();
      xhttp.onload = function () {
        let data = {};
        try { data = JSON.parse(this.responseText || "{}"); } catch (e) {}
        if (data.success) {
          showNotification(data.message || "Approved", "success");
          RenderSellers();
        } else {
          showNotification(data.message || "Failed to approve", "error");
        }
      }
      xhttp.open("GET", `/api/v1/admin/seller/approve/${id}`, true);
      xhttp.send();
    }

    // Delete seller by id
    function deleteCustomer(id) {
      const xhttp = new XMLHttpRequest();
      xhttp.onload = function () {
        let data = {};
        try { data = JSON.parse(this.responseText || "{}"); } catch (e) {}
        if (data.success) {
          showNotification(data.message || "Deleted", "success");
          RenderSellers();
        } else {
          showNotification(data.message || "Failed to delete", "error");
        }
      };
      xhttp.open("DELETE", `/api/v1/admin/seller/${id}`, true);
      xhttp.send();
    }

    // View dialog
    function openViewDialog(seller) {
      const wrap = document.getElementById('view-dialog');
      const content = document.getElementById('view-content');
      content.innerHTML = `
        <div class="flex items-start gap-4">
          <img src="${seller.profileImage}" alt="logo" class="h-20 w-20 rounded-md border border-gray-200 object-cover">
          <div class="grid grid-cols-2 gap-x-6 gap-y-2 text-sm">
            <div><span class="text-gray-500">Name:</span> <span class="font-medium">${seller.name || '-'}</span></div>
            <div><span class="text-gray-500">Store:</span> <span class="font-medium">${seller.storeName || '-'}</span></div>
            <div><span class="text-gray-500">Email:</span> <span class="font-medium">${seller.email || '-'}</span></div>
            <div><span class="text-gray-500">GSTN:</span> <span class="font-medium">${seller.gstn || '-'}</span></div>
            <div><span class="text-gray-500">Bank:</span> <span class="font-medium">${seller.bankDetails?.bankName || '-'}</span></div>
            <div><span class="text-gray-500">Status:</span>
              ${seller.identityVerification?.status === 'Verified'
                ? `<span class="inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold bg-green-50 text-green-700 border-green-200">Verified</span>`
                : `<span class="inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold bg-amber-50 text-amber-700 border-amber-200">Pending</span>`
              }
            </div>
          </div>
        </div>
      `;
      wrap.classList.remove('hidden');
      wrap.classList.add('flex');
    }

    function closeViewDialog() {
      const wrap = document.getElementById('view-dialog');
      wrap.classList.add('hidden');
      wrap.classList.remove('flex');
    }

    // Alert dialog
    function openAlertDialog(type, seller) {
      __pendingAction = { type, id: seller._id };
      const wrap = document.getElementById('alert-dialog');
      const title = document.getElementById('alert-title');
      const desc = document.getElementById('alert-description');
      const confirm = document.getElementById('alert-confirm');
      const cancelBtn = document.getElementById('alert-cancel');

      if (type === 'approve') {
        title.textContent = 'Approve seller?';
        desc.textContent = `This will mark ${seller.name || 'this seller'} as verified. You can change status later if needed.`;
        confirm.innerHTML = `<span class="btn-label">Approve</span>`;
        confirm.dataset.idle = 'Approve';
        confirm.dataset.loading = 'Approving...';
        confirm.className = 'inline-flex items-center justify-center gap-2 rounded-md bg-blue-600 text-white px-4 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-blue-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:opacity-60 disabled:cursor-not-allowed';
      } else {
        title.textContent = 'Delete seller?';
        desc.textContent = `This action cannot be undone. This will permanently delete ${seller.name || 'this seller'} and remove their data.`;
        confirm.innerHTML = `<span class="btn-label">Delete</span>`;
        confirm.dataset.idle = 'Delete';
        confirm.dataset.loading = 'Deleting...';
        confirm.className = 'inline-flex items-center justify-center gap-2 rounded-md bg-red-600 text-white px-4 py-2 text-sm font-medium shadow-sm transition-colors hover:bg-red-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-red-500 focus-visible:ring-offset-2 disabled:opacity-60 disabled:cursor-not-allowed';
      }
      cancelBtn.disabled = false;
      confirm.disabled = false;

      wrap.classList.remove('hidden');
      wrap.classList.add('flex');
    }

    function closeAlertDialog() {
      const wrap = document.getElementById('alert-dialog');
      wrap.classList.add('hidden');
      wrap.classList.remove('flex');
      __pendingAction = null;
    }

    // Global event delegation
    document.addEventListener('click', (ev) => {
      const btn = ev.target.closest('[data-action]');
      if (btn) {
        const id = btn.dataset.id;
        const seller = window.__sellers.get(id);
        if (!seller) return;
        const action = btn.dataset.action;
        if (action === 'view') {
          openViewDialog(seller);
        } else if (action === 'approve') {
          openAlertDialog('approve', seller);
        } else if (action === 'delete') {
          openAlertDialog('delete', seller);
        }
      }

      // Close dialog handlers
      const closeView = ev.target.closest("[data-close='view']");
      if (closeView) closeViewDialog();

      const closeAlert = ev.target.closest("[data-close='alert']");
      if (closeAlert) closeAlertDialog();
    });

    // Alert dialog controls
    document.getElementById('alert-cancel').addEventListener('click', closeAlertDialog);
    document.getElementById('alert-confirm').addEventListener('click', async () => {
      if (!__pendingAction) return;
      const { type, id } = __pendingAction;
      const confirmBtn = document.getElementById('alert-confirm');
      const cancelBtn = document.getElementById('alert-cancel');
      setButtonLoading(confirmBtn, true);
      cancelBtn.disabled = true;

      let result;
      if (type === 'approve') {
        result = await approveSeller(id);
      } else if (type === 'delete') {
        result = await deleteSeller(id);
      }

      setButtonLoading(confirmBtn, false);
      cancelBtn.disabled = false;
      closeAlertDialog();

      const ok = result && result.ok;
      const message = (result && result.data && result.data.message) || (ok ? 'Success' : 'Failed');
      showNotification(message, ok ? 'success' : 'error');
      if (ok) RenderSellers();
    });

    // Keyboard support for dialogs
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeViewDialog();
        closeAlertDialog();
      }
    });

    // Refresh button
    document.getElementById('refresh-btn').addEventListener('click', () => RenderSellers());

    document.addEventListener('DOMContentLoaded', () => RenderSellers());
  </script>
</body>
